#include "stdafx.h"
#include "TestBeginScene.h"
#include "CamController.h"
#include "Rotater.h"
#include "LinkByLine.h"
#include "Releaser.h"

IClonable* TestBeginScene::Clone()
{
    return new TestBeginScene;
}

UserMesh* mesh = nullptr;

void TestBeginScene::OnLoad(Scene* beforeScene)
{
    UserMesh::Create<CubeUserMesh>(L"../Resource/CubeUserMesh.mesh", true);
    UserMesh::Create<SphereUserMesh>(L"../Resource/SphereUserMesh.mesh", true);
    UserMesh::Create<CyilinderUserMesh>(L"../Resource/CyilinderUserMesh.mesh", true);
    UserMesh::Create<QuadUserMesh>(L"../Resource/QuadUserMesh.mesh", true);
    Texture::CreateFromFile(L"../SharedResourced/Texture/Dev.png");
    Texture::CreateFromFile(L"../SharedResourced/Texture/DevAlpha.png");
    Texture::CreateFromFile(L"../SharedResourced/Texture/DevTransparent.png");

    mesh = UserMesh::CreateUnmanaged<CyilinderUserMesh>();

    GraphicDevice::GetInstance()->GetDevice()->SetRenderState(D3DRS_LIGHTING, TRUE);

    //Light::SetAmbientLight(Color::white() * 0.1f);

    GameObject* cameraObj = CreateGameObject();
    cameraObj->transform->position = Vec3(0, 0, -2);
    cameraObj->AddComponent<Camera>();
    cameraObj->AddComponent<CamController>();

    GameObject* spotLightObj = CreateGameObject();
    spotLightObj->transform->position = Vec3(0, 0, -2.5f);
    spotLightObj->AddComponent<SpotLight>();
    spotLightObj->transform->parent = cameraObj->transform;

    GameObject* cyilinderObj1 = CreateGameObject();
    cyilinderObj1->transform->position = Vec3(0, 0, 0.0f);
    auto cubeRenderer = cyilinderObj1->AddComponent<UserMeshRenderer>();
    cubeRenderer->userMesh = mesh;
    cubeRenderer->SetTexture(0, Resource::Find(L"../SharedResourced/Texture/Dev.png")->GetReferenceTo<Texture>());
    cyilinderObj1->AddComponent<Releaser>()->m_target = mesh;
}

void TestBeginScene::OnUnload(Scene* nextScene)
{
    //mesh->ReleaseUnmanaged();
}
