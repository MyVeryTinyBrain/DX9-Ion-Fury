// Defines.h

#define DeclareSingletone(Name)																		\
private:																							\
static Name g_instance;																				\
public:																								\
static Name* GetInstance();																			\
private:

#define ImplementSingletone(Name)																	\
Name Name::g_instance;																				\
Name* Name::GetInstance()																			\
{																									\
	return &g_instance;																				\
}

// ObjectDefines.h

#define DefineGetReferenceAs(T)																		\
inline Ref<T> GetReferenceAs##T()																	\
{																									\
	return GetReferenceAs<T>();																		\
}

#define DefineGetReferenceTo(T)																		\
inline Ref<T> GetReferenceTo##T()																	\
{																									\
	return GetReferenceTo<T>();																		\
}																									\
__declspec(property(get = GetReferenceTo##T)) Ref<T> ref##T;

// ComponentDefines.h

#define ComponentOrderName(Name)		m_order##Name

#define ComponentCallFlagName(Name)		m_call##Name

#define ComponentSetCallName(Name)		SetCall##Name

#define ComponentCallFlag(Name)			ComponentCallFlagName(Name)

#define ComponentSetCall(Name)			ComponentSetCallName(Name)()

#define DefineComponentFunction(Name)																\
order_t ComponentOrderName(Name) = 0;																\
bool ComponentCallFlagName(Name) = true;															\
inline order_t Get##Name##Order() { return ComponentOrderName(Name); }								\
inline virtual void ComponentSetCallName(Name)() { ComponentCallFlagName(Name) = false; }			\
virtual void Name() {}																				

#define OverrideComponentFunction(Name)																\
inline virtual void ComponentSetCallName(Name)() {}													\
protected:																							\
virtual void Name() override;

#define DeclareStaticComponent(Name)																\
private:																							\
	static Name* g_instance;																		\
public:																								\
	static Name* GetInstance();																		\
private:

#define ImplementStaticComponent(Name)																\
Name* Name::g_instance = nullptr;																	\
Name* Name::GetInstance()																			\
{																									\
	return g_instance;																				\
}